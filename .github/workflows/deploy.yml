name: Deploy Beauty4U

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose environment"
        required: true
        default: "preprod_hq"
        type: choice
        options:
          - preprod_hq

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Build API ---
      - name: Build API
        run: |
          docker build -f Beauty4u.WebApi/Dockerfile -t beauty4u_api:latest Beauty4u.WebApi
          IMAGE_SIZE=$(docker image inspect beauty4u_api:latest --format='{{.Size}}')
          echo "API image size: $IMAGE_SIZE"
          if [ "$IMAGE_SIZE" -eq 0 ]; then
            echo "❌ beauty4u_api:latest image is empty!"
            exit 1
          fi

      # --- Build Jobs ---
      - name: Build Jobs
        run: |
          docker build -f Beauty4u.Jobs/Dockerfile -t beauty4u_jobs:latest Beauty4u.Jobs
          IMAGE_SIZE=$(docker image inspect beauty4u_jobs:latest --format='{{.Size}}')
          echo "Jobs image size: $IMAGE_SIZE"
          if [ "$IMAGE_SIZE" -eq 0 ]; then
            echo "❌ beauty4u_jobs:latest image is empty!"
            exit 1
          fi

      # --- Inject API Base URL for Angular ---
      - name: Inject API Base URL
        run: |
          sed -i "s|API_BASE_URL_PLACEHOLDER|${{ vars.APIBASEURL }}|g" Beauty4u.Web/src/environments/environment.prod.ts

      # --- Build Angular Web ---
      - name: Build Angular Web
        run: |
          docker build -f Beauty4u.Web/Dockerfile -t beauty4u_web:latest Beauty4u.Web
          IMAGE_SIZE=$(docker image inspect beauty4u_web:latest --format='{{.Size}}')
          echo "Web image size: $IMAGE_SIZE"
          if [ "$IMAGE_SIZE" -eq 0 ]; then
            echo "❌ beauty4u_web:latest image is empty!"
            exit 1
          fi

      # --- Save Docker Images as tar ---
      - name: Save Docker Images
        run: |
          docker save beauty4u_api:latest -o beauty4u_api.tar
          docker save beauty4u_jobs:latest -o beauty4u_jobs.tar
          docker save beauty4u_web:latest -o beauty4u_web.tar

      - name: Verify tar files
        run: ls -lh *.tar

      # --- Copy files to Azure VM ---
      - name: Copy to Azure VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          source: "beauty4u_api.tar beauty4u_jobs.tar beauty4u_web.tar docker-compose.yml"
          target: "${{ vars.DEPLOY_BASE_FOLDER }}"
          debug: true

      # --- Deploy ---
      - name: Deploy on Azure VM
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          script: |
            cd ~/beauty4u
            docker load -i beauty4u_api.tar
            docker load -i beauty4u_jobs.tar
            docker load -i beauty4u_web.tar
            echo "B4UCONNECTION=${{ secrets.B4UCONNECTION }}" >> .env
            
            echo "API_PORT=${{ vars.BEAUTY4U_API_PORT }}" > .env
            echo "API_CONTAINER_NAME=${{ vars.BEAUTY4U_API }}" >> .env
            
            echo "JOBS_PORT=${{ vars.BEAUTY4U_JOBS_PORT }}" >> .env
            echo "JOBS_CONTAINER_NAME=${{ vars.BEAUTY4U_JOBS }}" >> .env
            
            echo "WEB_PORT=${{ vars.BEAUTY4U_UI_PORT }}" >> .env
            echo "WEB_CONTAINER_NAME=${{ vars.BEAUTY4U_UI }}" >> .env
            
            echo "DBUSER=${{ secrets.DBUSER }}" >> .env
            echo "DBPASSWORD=${{ secrets.DBPASSWORD }}" >> .env
            
            echo "JWT_AUDIENCE=${{ secrets.JWT_AUDIENCE }}" >> .env
            echo "JWT_ISSUER=${{ secrets.JWT_ISSUER }}" >> .env
            echo "JWT_KEY=${{ secrets.JWT_KEY }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            
            echo "JWT_ACCESSTOKENEXPIRYMINUTES=${{ vars.JWT_ACCESSTOKENEXPIRYMINUTES }}" >> .env
            echo "JWT_REFRESHTOKENEXPIRYDAYS=${{ vars.JWT_REFRESHTOKENEXPIRYDAYS }}" >> .env
            echo "SCHEDULERAPI=${{ vars.SCHEDULERAPI }}" >> .env
            
            echo "HQAPI=${{ vars.HQAPI }}" >> .env
            echo "ISHQ=${{ vars.HQ_ISHQ }}" >> .env
            
            echo "CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}" >> .env
            docker compose up -d
