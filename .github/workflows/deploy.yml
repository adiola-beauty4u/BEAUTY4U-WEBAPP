name: Deploy Beauty4U

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose environment"
        required: true
        default: "preprod_hq"
        type: choice
        options:
          - preprod_hq

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - uses: actions/checkout@v4

      # --- Build API ---
      - name: Build API
        run: docker build -f Beauty4u.WebApi/Dockerfile -t beauty4u_api:latest .

      # --- Build Jobs ---
      - name: Build Jobs
        run: docker build -f Beauty4u.Jobs/Dockerfile -t beauty4u_jobs:latest .

      # --- Build Angular Web ---
      - name: Inject API Base URL
        run: |
          sed -i "s|API_BASE_URL_PLACEHOLDER|${{ vars.APIBASEURL }}|g" Beauty4u.Web/src/environments/environment.prod.ts
      - name: Build Angular Web
        run: docker build -f Beauty4u.Web/Dockerfile -t beauty4u_web:latest Beauty4u.Web

      # --- Save Docker Images ---
      - name: Save Docker Images
        run: |
          docker save beauty4u_api:latest -o beauty4u_api.tar
          docker save beauty4u_jobs:latest -o beauty4u_jobs.tar
          docker save beauty4u_web:latest -o beauty4u_web.tar
      # --- Copy images and docker-compose.yml to Windows VM ---
      - name: Copy files with scp
        run: |
          sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" \
          scp -o StrictHostKeyChecking=no \
          beauty4u_api.tar beauty4u_jobs.tar beauty4u_web.tar docker-compose.yml \
          ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }}:"${{ vars.DEPLOY_FOLDER }}"
      # --- Deploy on Windows VM ---
      - name: Deploy on Windows VM
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          port: 22
          script: |
            cd ${{ vars.DEPLOY_FOLDER }}
            echo "üì¶ Loading Docker images..."
            docker load -i beauty4u_api.tar
            docker load -i beauty4u_jobs.tar
            docker load -i beauty4u_web.tar
            echo "üöÄ Starting containers with runtime environment variables..."
            # --- WebApi ---
            docker stop beauty4u_hq 2>$null || true
            docker rm beauty4u_hq 2>$null || true
            docker run -d `
              --name beauty4u_hq `
              -p 5100:5100 `
              -e DOTNET_ENVIRONMENT=Production `
              -e ASPNETCORE_URLS=http://+:5100 `
              -e ConnectionStrings__B4UConnection=${{ secrets.B4UCONNECTION }} `
              -e DbConnectionAccess__User=${{ secrets.DBUSER }} `
              -e DbConnectionAccess__Password=${{ secrets.DBPASSWORD }} `
              -e Jwt__Key=${{ secrets.JWT_KEY }} `
              -e Jwt__Issuer=${{ secrets.JWT_ISSUER }} `
              -e Jwt__Audience=${{ secrets.JWT_AUDIENCE }} `
              -e Jwt__Secret=${{ secrets.JWT_SECRET }} `
              -e Jwt__AccessTokenExpiryMinutes=60 `
              -e Jwt__RefreshTokenExpiryDays=7 `
              -e SchedulerApi=http://localhost:6100 `
              -e HQAPI=http://localhost:5100 `
              -e HqSettings__IsHq=${{ vars.HQSETTINGS_ISHQ }} `
              -e Cors__AllowedOrigins=${{ vars.CORS_ALLOWED_ORIGINS }} `
              beauty4u_api:latest
            # --- Jobs ---
            docker stop beauty4u_jobs 2>$null || true
            docker rm beauty4u_jobs 2>$null || true
            docker run -d `
              --name beauty4u_jobs `
              -p 6100:6100 `
              -e DOTNET_ENVIRONMENT=Production `
              -e ASPNETCORE_URLS=http://+:6100 `
              -e ConnectionStrings__B4UConnection=${{ secrets.B4UCONNECTION }} `
              -e DbConnectionAccess__User=${{ secrets.DBUSER }} `
              -e DbConnectionAccess__Password=${{ secrets.DBPASSWORD }} `
              -e Jwt__Key=${{ secrets.JWT_KEY }} `
              -e Jwt__Issuer=${{ secrets.JWT_ISSUER }} `
              -e Jwt__Audience=${{ secrets.JWT_AUDIENCE }} `
              -e Jwt__Secret=${{ secrets.JWT_SECRET }} `
              -e Jwt__AccessTokenExpiryMinutes=60 `
              -e Jwt__RefreshTokenExpiryDays=7 `
              -e SchedulerApi=http://localhost:6100 `
              -e Cors__AllowedOrigins=${{ vars.CORS_ALLOWED_ORIGINS }} `
              beauty4u_jobs:latest
            # --- Angular Web ---
            docker stop beauty4u_web 2>$null || true
            docker rm beauty4u_web 2>$null || true
            docker run -d `
              --name beauty4u_web `
              -p 8101:80 `
              beauty4u_web:latest
            echo "‚è≥ Waiting for containers to be healthy..."
            for c in beauty4u_hq beauty4u_jobs beauty4u_web; do
              for i in {1..10}; do
                STATUS=$(docker inspect --format='{{.State.Health.Status}}' $c 2>$null || echo "starting")
                echo "$c -> $STATUS"
                if [ "$STATUS" = "healthy" ]; then break; fi
                sleep 10
              done
              if [ "$STATUS" != "healthy" ]; then
                echo "‚ùå $c did not become healthy in time. Showing logs..."
                docker logs $c
                exit 1
              fi
            done
            echo "‚úÖ All containers are healthy!"
