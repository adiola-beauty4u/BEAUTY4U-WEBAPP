name: Deploy Beauty4U

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose environment"
        required: true
        default: "preprod_hq"
        type: choice
        options:
          - preprod_hq

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - uses: actions/checkout@v4

      # --- Install .NET 9 SDK ---
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # --- Verify installed SDK ---
      - run: dotnet --info

      # --- Publish API ---
      - name: Publish API
        run: dotnet publish ./Beauty4u.WebApi/Beauty4u.WebApi.csproj -c Release -o ./publish/webapi

      # --- Publish Jobs ---
      - name: Publish Jobs
        run: dotnet publish ./Beauty4u.Jobs/Beauty4u.Jobs.csproj -c Release -o ./publish/jobs

      # --- Angular API_BASE_URL ---
      - name: Inject API Base URL
        run: |
          sed -i "s|API_BASE_URL_PLACEHOLDER|${{ vars.APIBASEURL }}|g" Beauty4u.Web/src/environments/environment.prod.ts

      # --- Build Angular Web ---
      - name: Build Angular Web
        run: |
          cd Beauty4u.Web
          npm ci
          npm run build -- --configuration production --output-path=../publish/web

      # --- Verify publish folders ---
      - name: Check publish outputs
        run: ls -R ./publish

      # --- Copy publish outputs + compose file to VM ---
      - name: Copy files to Azure VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          port: 22
          source: |
            publish/webapi/**
            publish/jobs/**
            publish/web/**
            docker-compose.yml
          target: "${{ vars.DEPLOY_FOLDER }}"
          overwrite: true
          debug: true

      # --- Deploy on VM ---
      - name: Deploy on Azure VM
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          script: |
            cd ${{ vars.DEPLOY_BASE_FOLDER }}
            
            # Recreate .env each deployment
            rm -f .env
            echo "B4UCONNECTION=${{ secrets.B4UCONNECTION }}" >> .env
            
            echo "API_PORT=${{ vars.BEAUTY4U_API_PORT }}" >> .env
            echo "API_CONTAINER_NAME=${{ vars.BEAUTY4U_API }}" >> .env
            
            echo "JOBS_PORT=${{ vars.BEAUTY4U_JOBS_PORT }}" >> .env
            echo "JOBS_CONTAINER_NAME=${{ vars.BEAUTY4U_JOBS }}" >> .env
            
            echo "WEB_PORT=${{ vars.BEAUTY4U_UI_PORT }}" >> .env
            echo "WEB_CONTAINER_NAME=${{ vars.BEAUTY4U_UI }}" >> .env
            
            echo "DBUSER=${{ secrets.DBUSER }}" >> .env
            echo "DBPASSWORD=${{ secrets.DBPASSWORD }}" >> .env
            
            echo "JWT_AUDIENCE=${{ secrets.JWT_AUDIENCE }}" >> .env
            echo "JWT_ISSUER=${{ secrets.JWT_ISSUER }}" >> .env
            echo "JWT_KEY=${{ secrets.JWT_KEY }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            
            echo "JWT_ACCESSTOKENEXPIRYMINUTES=${{ vars.JWT_ACCESSTOKENEXPIRYMINUTES }}" >> .env
            echo "JWT_REFRESHTOKENEXPIRYDAYS=${{ vars.JWT_REFRESHTOKENEXPIRYDAYS }}" >> .env
            echo "SCHEDULERAPI=${{ vars.SCHEDULERAPI }}" >> .env
            
            echo "HQAPI=${{ vars.HQAPI }}" >> .env
            echo "ISHQ=${{ vars.HQ_ISHQ }}" >> .env
            
            echo "CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}" >> .env

            # Restart containers with latest publish outputs
            docker compose down
            docker compose up -d --build
