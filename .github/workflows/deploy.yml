name: Deploy to Azure VM

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment (preprod_hq, preprod_th, preprod_oh)"
        required: true
        type: environment

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build all Docker images
      - name: Build API Docker image
        run: docker build -f docker/api.Dockerfile -t beauty4u/${{ vars.BEAUTY4U_API }}:latest .

      - name: Build Jobs Docker image
        run: docker build -f docker/jobs.Dockerfile -t beauty4u/${{ vars.BEAUTY4U_JOBS }}:latest .

      - name: Build Web Docker image
        run: docker build -f docker/web.Dockerfile -t beauty4u/${{ vars.BEAUTY4U_UI }}:latest .

      - name: Save Docker images
        run: |
          docker save beauty4u/${{ vars.BEAUTY4U_API }}:latest -o api.tar
          docker save beauty4u/${{ vars.BEAUTY4U_JOBS }}:latest -o jobs.tar
          docker save beauty4u/${{ vars.BEAUTY4U_UI }}:latest -o web.tar

      - name: Copy Docker images and compose file to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          source: "*.tar,docker/docker-compose.tpl.yml"
          target: "/home/${{ secrets.AZURE_VM_USER }}/deploy"

      - name: Run on VM
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          script: |
            cd /home/${{ secrets.AZURE_VM_USER }}/deploy
            docker load -i api.tar
            docker load -i jobs.tar
            docker load -i web.tar

            # Generate .env from GitHub Environment
            echo "DOTNET_ENVIRONMENT=${{ vars.DOTNET_ENVIRONMENT }}" > .env
            echo "B4UCONNECTION=${{ secrets.B4UCONNECTION }}" >> .env
			echo "DBUSER=${{ secrets.DBUSER }}" >> .env
			echo "DBPASSWORD=${{ secrets.DBPASSWORD }}" >> .env
			echo "JWT_AUDIENCE=${{ secrets.JWT_AUDIENCE }}" >> .env
			echo "JWT_ISSUER=${{ secrets.JWT_ISSUER }}" >> .env
            echo "JWT_KEY=${{ secrets.JWT_KEY }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            
			echo "BEAUTY4U_API=${{ vars.BEAUTY4U_API }}" >> .env
			echo "BEAUTY4U_API_PORT=${{ vars.BEAUTY4U_API_PORT }}" >> .env
			echo "BEAUTY4U_JOBS=${{ vars.BEAUTY4U_JOBS }}" >> .env
			echo "BEAUTY4U_JOBS_PORT=${{ vars.BEAUTY4U_JOBS_PORT }}" >> .env
			echo "BEAUTY4U_UI=${{ vars.BEAUTY4U_UI }}" >> .env
			echo "BEAUTY4U_UI_PORT=${{ vars.BEAUTY4U_UI_PORT }}" >> .env
			
			
            echo "APIBASEURL=${{ vars.APIBASEURL }}" >> .env
            
			echo "CORS_ALLOWEDORIGINS=${{ vars.CORS_ALLOWEDORIGINS }}" >> .env
			echo "HQAPI=${{ vars.HQAPI }}" >> .env
			echo "ISHQ=${{ vars.ISHQ }}" >> .env
			echo "JWT_ACCESSTOKENEXPIRYMINUTES=${{ vars.JWT_ACCESSTOKENEXPIRYMINUTES }}" >> .env
			echo "JWT_REFRESHTOKENEXPIRYDAYS=${{ vars.JWT_REFRESHTOKENEXPIRYDAYS }}" >> .env
			echo "SCHEDULERAPI=${{ vars.SCHEDULERAPI }}" >> .env

            echo "DEPLOY_USER=${{ secrets.AZURE_VM_USER }}" >> .env

            # Deploy services
            docker compose -f docker-compose.tpl.yml --env-file .env up -d --force-recreate
