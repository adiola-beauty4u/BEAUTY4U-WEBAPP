Skip to content
Navigation Menu
adiola-beauty4u
BEAUTY4U-WEBAPP

Type / to search
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Settings
Deploy Beauty4U
Deploy Beauty4U #70
Jobs
Run details
Workflow file for this run
.github/workflows/deploy.yml at 25c45fd
name: Deploy Beauty4U

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose environment"
        required: true
        default: "preprod_hq"
        type: choice
        options:
          - preprod_hq

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - uses: actions/checkout@v4

      # --- Build API ---
      - name: Build API
        run: docker build -f Beauty4u.WebApi/Dockerfile -t beauty4u_api:latest .

      # --- Build Jobs ---
      - name: Build Jobs
        run: docker build -f Beauty4u.Jobs/Dockerfile -t beauty4u_jobs:latest .

      # --- Angular API_BASE_URL ---
      - name: Inject API Base URL
        run: |
          sed -i "s|API_BASE_URL_PLACEHOLDER|${{ vars.APIBASEURL }}|g" Beauty4u.Web/src/environments/environment.prod.ts
      # --- Build Angular Web ---
      - name: Build Angular Web
        run: docker build -f Beauty4u.Web/Dockerfile -t beauty4u_web:latest Beauty4u.Web


      # --- Save Images ---
      - name: Save Docker Images
        run: |
          docker save beauty4u_api:latest -o beauty4u_api.tar
          docker save beauty4u_jobs:latest -o beauty4u_jobs.tar
          docker save beauty4u_web:latest -o beauty4u_web.tar
          
      - name: Verify Docker images saved as tar files
        run: readlink -f *.tar
        
      - name: Check files in workspace
        run: readlink -f *.yml

      - name: Copy files with scp
        run: |
          sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" \
          scp -o StrictHostKeyChecking=no \
          beauty4u_api.tar beauty4u_jobs.tar beauty4u_web.tar docker-compose.yml \
          ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }}:"${{ vars.DEPLOY_FOLDER }}"

      # --- Deploy on Windows VM using PowerShell ---
      - name: Deploy on Windows VM
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          port: 22
          script: |
            powershell -Command "
            Set-Location '${{ vars.DEPLOY_FOLDER }}';

            Write-Host 'üì¶ Loading docker images...';
            docker load -i beauty4u_api.tar;
            docker load -i beauty4u_jobs.tar;
            docker load -i beauty4u_web.tar;

            Write-Host '‚öôÔ∏è Writing .env file...';
            $envContent = @'
            B4UCONNECTION=${{ secrets.B4UCONNECTION }}
            API_PORT=5100
            API_CONTAINER_NAME=beauty4u_hq
            JOBS_PORT=6100
            JOBS_CONTAINER_NAME=beauty4u_jobs
            WEB_PORT=8101
            WEB_CONTAINER_NAME=beauty4u_web
            DBUSER=${{ secrets.DBUSER }}
            DBPASSWORD=${{ secrets.DBPASSWORD }}
            JWT_AUDIENCE=${{ secrets.JWT_AUDIENCE }}
            JWT_ISSUER=${{ secrets.JWT_ISSUER }}
            JWT_KEY=${{ secrets.JWT_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_ACCESSTOKENEXPIRYMINUTES=60
            JWT_REFRESHTOKENEXPIRYDAYS=7
            SCHEDULERAPI=http://***:6100
            HQAPI=http://***:5100
            ISHQ=${{ vars.HQSETTINGS_ISHQ }}
            CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}
            '@;

            $envContent | Out-File -FilePath '.env' -Encoding UTF8;

            Write-Host 'üöÄ Starting containers...';
            docker compose up -d;

            Write-Host '‚è≥ Waiting for containers to be healthy...';
            $containers = @('beauty4u_hq', 'beauty4u_jobs', 'beauty4u_web');
            foreach ($c in $containers) {
                $i = 0;
                do {
                    $status = $(docker inspect --format='{{.State.Health.Status}}' $c 2>$null);
                    Write-Host "$c -> $status";
                    if ($status -eq 'healthy') { break }
                    Start-Sleep -Seconds 10;
                    $i++;
                } while ($i -lt 10);
                if ($status -ne 'healthy') {
                    Write-Host "‚ùå $c did not become healthy in time. Showing logs...";
                    docker logs $c;
                    exit 1;
                }
            }
            Write-Host '‚úÖ All containers are healthy!';
            "
