name: Deploy Preprod

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose environment"
        required: true
        default: "preprod_hq"
        type: choice
        options:
          - preprod_hq

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - uses: actions/checkout@v4

      # --- Build API ---
      - name: Build API
        run: docker build -f Beauty4u.WebApi/Dockerfile -t beauty4u_api:latest .

      # --- Build Jobs ---
      - name: Build Jobs
        run: docker build -f Beauty4u.Jobs/Dockerfile -t beauty4u_jobs:latest .

      # --- Build Angular Web ---
      - name: Inject API Base URL
        run: |
          sed -i "s|API_BASE_URL_PLACEHOLDER|${{ vars.APIBASEURL }}|g" Beauty4u.Web/src/environments/environment.prod.ts
      - name: Build Angular Web
        run: docker build -f Beauty4u.Web/Dockerfile -t beauty4u_web:latest Beauty4u.Web

      # --- Save Docker Images ---
      - name: Save Docker Images
        run: |
          docker save beauty4u_api:latest -o beauty4u_api.tar
          docker save beauty4u_jobs:latest -o beauty4u_jobs.tar
          docker save beauty4u_web:latest -o beauty4u_web.tar

      - name: Prepare Files
        run: |
          cp beauty4u_api.tar beauty4u_hq.tar
          cp beauty4u_api.tar beauty4u_th.tar
          cp beauty4u_api.tar beauty4u_oh.tar

      # --- Copy images and docker-compose.yml to Windows VM ---
      - name: Copy files with scp
        run: |
          sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" \
          scp -o StrictHostKeyChecking=no \
          beauty4u_hq.tar beauty4u_th.tar beauty4u_oh.tar beauty4u_jobs.tar beauty4u_web.tar docker-compose.yml \
          ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }}:"${{ vars.DEPLOY_FOLDER }}"

      # -- Load Docker Files
      - name: Load Docker images on Windows VM
        run: |
          sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" \
            ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} \
            powershell -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command - <<'PWSH'
          $DeployFolder = '${{ vars.DEPLOY_FOLDER }}'
      
          function Write-Log($msg) { Write-Host "[INFO] $msg" }
          function Write-ErrorLog($msg) { Write-Host "[ERROR] $msg"; exit 1 }
      
          Write-Log "ðŸ“¥ Loading Docker images from $DeployFolder..."
      
          foreach ($image in @("beauty4u_hq", "beauty4u_th", "beauty4u_oh", "beauty4u_jobs", "beauty4u_web")) {
              $tar = Join-Path $DeployFolder "$image.tar"
              if (-Not (Test-Path $tar)) {
                  Write-ErrorLog "File not found: $tar"
              }
      
              try {
                  Write-Log "Loading $tar..."
                  docker load --input $tar 2>&1 | ForEach-Object { Write-Log $_ }
              } catch {
                  Write-ErrorLog "Failed to load $tar: $_"
              }
          }
      
          Write-Log "âœ… Docker images after load:"
          docker images -a
          PWSH
