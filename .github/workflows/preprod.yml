name: Deploy Preprod

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose environment"
        required: true
        default: "preprod_hq"
        type: choice
        options:
          - preprod_hq

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - uses: actions/checkout@v4

      # --- Build API ---
      - name: Build API
        run: docker build -f Beauty4u.WebApi/Dockerfile -t beauty4u_api:latest .

      # --- Build Jobs ---
      - name: Build Jobs
        run: docker build -f Beauty4u.Jobs/Dockerfile -t beauty4u_jobs:latest .

      # --- Build Angular Web ---
      - name: Inject API Base URL
        run: |
          sed -i "s|API_BASE_URL_PLACEHOLDER|${{ vars.APIBASEURL }}|g" Beauty4u.Web/src/environments/environment.prod.ts
      - name: Build Angular Web
        run: docker build -f Beauty4u.Web/Dockerfile -t beauty4u_web:latest Beauty4u.Web

      # --- Save Docker Images ---
      - name: Save Docker Images
        run: |
          # API image gets multiple tags
          docker tag beauty4u_api:latest beauty4u_hq:latest
          docker tag beauty4u_api:latest beauty4u_th:latest
          docker tag beauty4u_api:latest beauty4u_oh:latest
          docker tag beauty4u_api:latest beauty4u_um:latest
          docker tag beauty4u_api:latest beauty4u_ch:latest
          docker tag beauty4u_api:latest beauty4u_wm:latest
          docker tag beauty4u_api:latest beauty4u_cv:latest
          docker tag beauty4u_api:latest beauty4u_pw:latest
          docker tag beauty4u_api:latest beauty4u_wb:latest
          docker tag beauty4u_api:latest beauty4u_wd:latest
          docker tag beauty4u_api:latest beauty4u_gb:latest
          docker tag beauty4u_api:latest beauty4u_bw:latest
          docker tag beauty4u_api:latest beauty4u_gt:latest
          docker tag beauty4u_api:latest beauty4u_wo:latest
      
          # Save each tagged image
          docker save beauty4u_hq:latest -o beauty4u_hq.tar
          docker save beauty4u_th:latest -o beauty4u_th.tar
          docker save beauty4u_oh:latest -o beauty4u_oh.tar
          docker save beauty4u_um:latest -o beauty4u_um.tar
          docker save beauty4u_ch:latest -o beauty4u_ch.tar
          docker save beauty4u_wm:latest -o beauty4u_wm.tar
          docker save beauty4u_cv:latest -o beauty4u_cv.tar
          docker save beauty4u_pw:latest -o beauty4u_pw.tar
          docker save beauty4u_wb:latest -o beauty4u_wb.tar
          docker save beauty4u_wd:latest -o beauty4u_wd.tar
          docker save beauty4u_gb:latest -o beauty4u_gb.tar
          docker save beauty4u_bw:latest -o beauty4u_bw.tar
          docker save beauty4u_gt:latest -o beauty4u_gt.tar
          docker save beauty4u_wo:latest -o beauty4u_wo.tar
      
          # Other images
          docker save beauty4u_jobs:latest -o beauty4u_jobs.tar
          docker save beauty4u_web:latest -o beauty4u_web.tar

      # --- Copy & Load Docker images in one go ---
      - name: Copy & Load Docker images to Windows VM
        run: |
          sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }}:"${{ vars.DEPLOY_FOLDER }}"
      
          for tar in beauty4u_jobs.tar beauty4u_web.tar beauty4u_hq.tar beauty4u_th.tar beauty4u_oh.tar beauty4u_um.tar beauty4u_ch.tar beauty4u_wm.tar beauty4u_cv.tar beauty4u_pw.tar beauty4u_wb.tar beauty4u_wd.tar beauty4u_gb.tar beauty4u_bw.tar beauty4u_gt.tar beauty4u_wo.tar; do
            echo "ðŸ“¦ Loading $tar ..."
            sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" \
              ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} \
              "docker load" < $tar
          done
      
          sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" \

      - name: Run Docker container for beauty4u_web
        run: |      
          # Stop & remove beauty4u_web container instead of loading images
          echo "Stopping and removing beauty4u_web ..."
          sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" \
            ssh -o StrictHostKeyChecking=no \
            ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} \
            "docker stop beauty4u_web; docker rm -f beauty4u_web;"

          sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" \
            ssh -o StrictHostKeyChecking=no \
            ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} \
            "docker run -d \
              --name beauty4u_web \
              --memory=1g \
              --memory-reservation=1g \
              -p 8101:80 \
              beauty4u_web:latest"
